import path from 'path';

import inquirer from 'inquirer';
import { outputFile, pathExists } from 'fs-extra';

import { Conf } from '../modules/Conf';
import { Pasmo } from '../asemblers/Pasmo';
import { Assembler } from '../asemblers/Assembler';
import { replaceAll } from '../utils/replaceAll';

type SetupParameters = {
  name: string;
  size: string;
  main: string;
  asmOptions: string;
};

const getMbtools = (): string => {
  if (process.mainModule) {
    return process.mainModule.filename;
  }

  return process.argv0;
};

const getAssembler = (type: string): Assembler => {
  if (type === 'pasmo') return Pasmo;

  throw new Error(`unsupported assembler type: ${type}`);
};

const convertParam = (param: string, dict: { [key: string]: string }): string =>
  Object.entries(dict).reduce(
    (prev: string, [key, value]): string => replaceAll(prev, key, value),
    param,
  );

const createMakefile = (conf: Conf, params: SetupParameters): string => {
  const mbtools = getMbtools();
  const assembler = getAssembler(conf.asm.type);

  const dict = {
    '<FILE>': '$(DEST)',
    '<SRC>': '$<',
    '<DEST>': '$@',
    '<OPTIONS>': params.asmOptions,
  };

  return `###
### GENERATED by mbtools
###

ASM=${conf.asm.path}
MBTOOLS=${mbtools}

DEST=${params.name}${conf.dest.ext}
PRE_DEST=${params.name}.tmp
PP_EXT=${conf.pp.ext}
SIZE=${params.size}
MAIN=${params.main}${conf.asm.ext}
FILE=$(wildcard **/*.js **/*.png)
SRC=$(FILE:%=%.inc)
.SUFFIX: .js .png .asm .inc

all: $(DEST)

clean:
\trm -f **/*.js.*inc **/*.png.*inc
\trm -f $(DEST)
\trm -f $(PRE_DEST)
\trm -f $(MAIN).*

build: $(DEST)

watch: clean build
\t$(MBTOOLS) watch

$(DEST): $(PRE_DEST)
\t$(MBTOOLS) shrink $(SIZE) $< $@

$(PRE_DEST): $(MAIN) $(SRC)
\t$(ASM) ${convertParam(assembler.parameter, dict)}

%.js.inc: %.js
\t$(MBTOOLS) js2asm $< $(PP_EXT)

%.png.inc: %.png
\t$(MBTOOLS) png2asm $< $(PP_EXT)
`;
};

export const setup = async (conf: Conf): Promise<void> => {
  const currentDir = path.resolve('.');

  const makefile = path.resolve(currentDir, 'Makefile');

  if (await pathExists(makefile)) {
    const { overwrite } = await inquirer.prompt<{ overwrite: boolean }>([
      {
        type: 'confirm',
        name: 'overwrite',
        message: 'Makefile already exists. Overwrite?',
        default: false,
      },
    ]);

    if (!overwrite) {
      console.error('canceled.');
      process.exit(0);
    }
  }

  const defaultParams: SetupParameters = {
    name: `${path.basename(currentDir)}`,
    size: '32',
    main: `main`,
    asmOptions: '',
  };

  const transformer = (x: string): string => x.trim();
  const validate = (value: string): string | boolean => {
    return value.trim().length === 0 ? 'required parameter' : true;
  };

  const result = await inquirer.prompt<SetupParameters>([
    {
      type: 'input',
      name: 'name',
      message: 'Output file name without extname',
      default: defaultParams.name,
      transformer,
      validate,
    },
    {
      type: 'input',
      name: 'main',
      message: 'Main source file without extname',
      default: defaultParams.main,
      transformer,
      validate,
    },
    {
      type: 'input',
      name: 'asmOptions',
      message: 'Additional options for assembler',
      default: '',
      transformer,
    },
    {
      type: 'list',
      name: 'size',
      message: 'Output data size',
      choices: [
        { name: '8KB', value: '8' },
        { name: '16KB', value: '16' },
        { name: '32KB', value: '32' },
        { name: '48KB', value: '48' },
      ],
      default: defaultParams.size,
      transformer,
      validate,
    },
  ]);

  await outputFile(
    path.resolve(currentDir, 'Makefile'),
    createMakefile(conf, { ...defaultParams, ...result }),
  );

  // eslint-disable-next-line no-console
  console.info('write Makefile.');
};
