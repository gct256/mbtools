import path from 'path';

import inquirer from 'inquirer';
import { outputFile, pathExists } from 'fs-extra';

import { Conf } from '../modules/Conf';
import { Pasmo } from '../asemblers/Pasmo';
import { Assembler } from '../asemblers/Assembler';
import { replaceAll } from '../utils/replaceAll';

/** Parameters for Makefile generation. */
type MakefileParameters = {
  /** destination name. (without extname) */
  name: string;
  /** shrink size. */
  size: string;
  /** main source file. */
  main: string;
  /** options for assembler. */
  asmOptions: string;
};

/**
 * Get mbtools's path.
 */
const getMbtools = (): string => {
  if (process.mainModule) {
    return process.mainModule.filename;
  }

  return process.argv0;
};

/**
 * Get assembler settings for assembler type.
 *
 * @param type assembler type.
 */
const getAssembler = (type: string): Assembler => {
  if (type === 'pasmo') return Pasmo;

  throw new Error(`unsupported assembler type: ${type}`);
};

/**
 * Replace parameter string to Makefile parameter.
 *
 * @param param parameter string.
 * @param dict replacement dictionary.
 */
const replaceParam = (param: string, dict: { [key: string]: string }): string =>
  Object.entries(dict).reduce(
    (prev: string, [key, value]): string => replaceAll(prev, key, value),
    param,
  );

/**
 * Build Makefile as string.
 *
 * @param conf configuration.
 * @param params Parameters for Makefile generation.
 */
const buildMakefile = (conf: Conf, params: MakefileParameters): string => {
  const mbtools = getMbtools();
  const assembler = getAssembler(conf.asm.type);

  const dict = {
    '<FILE>': '$(DEST)',
    '<SRC>': '$<',
    '<DEST>': '$@',
    '<OPTIONS>': params.asmOptions,
  };

  return `###
### GENERATED by mbtools
###

ASM=${conf.asm.path}
MBTOOLS=${mbtools}

DEST=${params.name}${conf.dest.ext}
PRE_DEST=${params.name}.tmp
PP_EXT=${conf.pp.ext}
SIZE=${params.size}
MAIN=${params.main}${conf.asm.ext}
FILE=$(wildcard **/*.js **/*.png)
SRC=$(FILE:%=%.inc)
.SUFFIX: .js .png .asm .inc

all: $(DEST)

clean:
\trm -f **/*.js.*inc **/*.png.*inc
\trm -f $(DEST)
\trm -f $(PRE_DEST)
\trm -f $(MAIN).*

build: $(DEST)

watch: clean build
\t$(MBTOOLS) watch

$(DEST): $(PRE_DEST)
\t$(MBTOOLS) shrink $(SIZE) $< $@

$(PRE_DEST): $(MAIN) $(SRC)
\t$(ASM) ${replaceParam(assembler.parameter, dict)}

%.js.inc: %.js
\t$(MBTOOLS) js2asm $< $(PP_EXT)

%.png.inc: %.png
\t$(MBTOOLS) png2asm $< $(PP_EXT)
`;
};

/**
 * Create Makefile interactive.
 *
 * @param currentDir absolute path of current directory.
 * @param conf configuration.
 */
const createMakefile = async (
  currentDir: string,
  conf: Conf,
): Promise<void> => {
  const name = 'Makefile';
  const makefile = path.resolve(currentDir, name);

  if (await pathExists(makefile)) {
    const { overwrite } = await inquirer.prompt<{ overwrite: boolean }>([
      {
        type: 'confirm',
        name: 'overwrite',
        message: `${name} already exists. Overwrite?`,
        default: false,
      },
    ]);

    if (!overwrite) {
      console.error(`Skip create ${name}`);

      return;
    }
  }

  const defaultParams: MakefileParameters = {
    name: `${path.basename(currentDir)}`,
    size: '32',
    main: `main`,
    asmOptions: '',
  };

  const transformer = (x: string): string => x.trim();
  const validate = (value: string): string | boolean => {
    return value.trim().length === 0 ? 'required parameter' : true;
  };

  const result = await inquirer.prompt<MakefileParameters>([
    {
      type: 'input',
      name: 'name',
      message: 'Output file name without extname',
      default: defaultParams.name,
      transformer,
      validate,
    },
    {
      type: 'input',
      name: 'main',
      message: 'Main source file without extname',
      default: defaultParams.main,
      transformer,
      validate,
    },
    {
      type: 'input',
      name: 'asmOptions',
      message: 'Additional options for assembler',
      default: '',
      transformer,
    },
    {
      type: 'list',
      name: 'size',
      message: 'Output data size',
      choices: [
        { name: '8KB', value: '8' },
        { name: '16KB', value: '16' },
        { name: '32KB', value: '32' },
        { name: '48KB', value: '48' },
      ],
      default: defaultParams.size,
      transformer,
      validate,
    },
  ]);

  await outputFile(
    makefile,
    buildMakefile(conf, { ...defaultParams, ...result }),
    'utf8',
  );

  // eslint-disable-next-line no-console
  console.info(`write ${name}`);
};

/**
 * Build .gitignore as string.
 *
 * @param conf configuration.
 */
const buildGitIgnore = (conf: Conf): string => {
  return `###
### GENERATED by mbtools
###

*.js${conf.pp.ext}
*.png${conf.pp.ext}
*.png.*${conf.pp.ext}
*${conf.dest.ext}
*.tmp
*.sym`;
};

/**
 * Create .gitignore interactive.
 *
 * @param currentDir absolute path of current directory.
 * @param conf configuration.
 */
const createGitIgnore = async (
  currentDir: string,
  conf: Conf,
): Promise<void> => {
  const name = '.gitignore';
  const gitIgnore = path.resolve(currentDir, name);

  if (await pathExists(gitIgnore)) {
    const { overwrite } = await inquirer.prompt<{ overwrite: boolean }>([
      {
        type: 'confirm',
        name: 'overwrite',
        message: `${name} already exists. Overwrite?`,
        default: false,
      },
    ]);

    if (!overwrite) {
      console.error(`Skip create ${name}`);

      return;
    }
  }
  await outputFile(gitIgnore, buildGitIgnore(conf), 'utf8');

  // eslint-disable-next-line no-console
  console.info(`write ${name}`);
};

/**
 * Implementaion of CLI Command: setup
 *
 * @param conf configuration.
 */
export const setup = async (conf: Conf): Promise<void> => {
  const currentDir = path.resolve('.');

  await createMakefile(currentDir, conf);
  await createGitIgnore(currentDir, conf);
};
